#include<iostream>
#include<vector>
using namespace std;
class Node 
{ 
    public:
    int data; 
    Node* left, * right; 
}; 
Node* newNode(int data) 
{ 
    Node* node = (Node*)malloc(sizeof(Node)); 
    node->data = data; 
    node->left = node->right = NULL; 
    return (node); 
}
Node *LevelOrder(int arr[],Node *root,int i,int n )
{
    if(i<n)
    {
        Node * temp=newNode(arr[i]);
        root=temp;
        
        root->left=LevelOrder(arr,root->left,2*i+1,n);
        root->right=LevelOrder(arr,root->right,2*i+2,n);
    }
    return root;

}
Node * LowestCommonAncestor(Node* root, int n1, int n2) 
{  
    if (root == NULL) 
    return NULL; 
    if (root->data == n1 || root->data == n2)
     {
        return root; 
    }
    Node *left  = LowestCommonAncestor(root->left, n1, n2); 
    Node *right = LowestCommonAncestor(root->right, n1, n2);
    if (left && right)  
    return root; 

    if(left != NULL)
    {
        return left;
    }
    else
    {
        return right;
    } 
} 
int main()
{
    
    int n;
    int n1,n2;
    int *arr;
    cin>>n;
    arr=new int[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cin>>n1>>n2;
    Node *root=LevelOrder(arr,root,0,n);
    cout << LowestCommonAncestor(root, n1, n2)->data;
          
    return 0;
}
