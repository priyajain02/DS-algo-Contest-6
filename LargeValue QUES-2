#include<iostream>
#include<vector>
using namespace std;
class Node 
{ 
    public:
    int data; 
    Node* left, * right; 
}; 
Node* newNode(int data) 
{ 
    Node* node = (Node*)malloc(sizeof(Node)); 
    node->data = data; 
    node->left = node->right = NULL; 
    return (node); 
}
Node *LevelOrder(int arr[],Node *root,int i,int n )
{
    if(i<n)
    {
        Node * temp=newNode(arr[i]);
        root=temp;
        
        root->left=LevelOrder(arr,root->left,2*i+1,n);
        root->right=LevelOrder(arr,root->right,2*i+2,n);
    }
    return root;

}
void func (vector<int>& vec, int d,Node* root) 
{ 
    if (!root) 
        return;
    if (d == vec.size()) 
        vec.push_back(root->data); 
  
    else
        vec[d] = max(vec[d], root->data); 

    func(vec,d + 1, root->left); 
    func(vec, d + 1, root->right); 
} 
vector<int> largeValue(Node* root) 
{ 
    vector<int> res; 
    func(res,  0,root); 
    return res; 
}
int main()
{
    
    int n;
    cin>>n;
    int *arr;
    arr=new int[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    Node *root=LevelOrder(arr,root,0,n);
    vector<int> res = largeValue(root); 
    for (int i = 0; i < res.size(); i++) 
        cout << res[i] << "\n"; 
          
    return 0;
}
